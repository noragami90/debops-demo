name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest flake8
        pip install -r requirements.txt

    - name: Test with pytest
      run: |
        pytest

    - name: Create deployment package
      run: |
        # Создаем конфигурацию Prometheus
        echo "global:
          scrape_interval: 15s

        scrape_configs:
          - job_name: 'flask-app'
            static_configs:
              - targets: ['web:5000']" > prometheus.yml
        
        # Создаем архив со всеми файлами
        tar -czf deploy.tar.gz \
          docker-compose.yml \
          Dockerfile \
          requirements.txt \
          app.py \
          templates/ \
          prometheus.yml

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deploy-package
        path: deploy.tar.gz
        retention-days: 1

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deploy-package

    - name: Copy deployment package
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        source: "deploy.tar.gz"
        target: "~/devops-demo"

    - name: Deploy and verify
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          cd ~/devops-demo
          tar -xzf deploy.tar.gz
          
          # Проверяем наличие файлов
          ls -la
          
          echo "Stopping existing containers..."
          sudo docker-compose down || true
          
          echo "Building new image..."
          sudo docker-compose build
          
          echo "Starting containers..."
          sudo docker-compose up -d
          
          echo "Waiting for containers to start..."
          sleep 10
          
          echo "Checking container status..."
          sudo docker-compose ps
          
          echo "Checking logs..."
          sudo docker-compose logs
          
          echo "Testing application..."
          curl http://localhost:5000/health
          
          echo "Cleanup..."
          rm deploy.tar.gz